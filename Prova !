#Definizione del punto di partenza

prefix = 'https://maps.googleapis.com/maps/api/geocode/json'
url = urlparse.urlparse('address=Via+Ilio+Barontini,+40138+Bologna&key=AIzaSyCKsQch4HW5L2uDRFTp53qUuBnyrmGnd04	'.format(prefix,
                                                         address_str,
                                                         key))
full_url = url.scheme + '://' + url.netloc + url.path + '?' + url.query

#Definizione della matrice delle distanze

ef parse_json(url=''):
    req = urllib2.Request(url)
    opener = urllib2.build_opener()
    f = opener.open(req)
    d = simplejson.load(f)
    i = 0
    durations = [0] * len(addresses)
    for row in d['rows'][0]['elements']:
        if 'duration_in_traffic' in row:
            durations[i] = row['duration_in_traffic']['value'] / 60
        else:
            durations[i] = row['duration']['value'] / 60
        i += 1
    return [addresses, durations]
    
    
#Risoluzione della problematica della Geosfera
    
    from math import cos, sin, tan, sqrt, pi, radians, degrees, asin, atan2

r = 3963.1676
bearing = radians(angle)
lat1 = radians(origin_geocode[0])
lng1 = radians(origin_geocode[1])
lat2 = asin(sin(lat1) * cos(radius / r) + cos(lat1) * sin(radius / r) * cos(bearing))
lng2 = lng1 + atan2(sin(bearing) * sin(radius / r) * cos(lat1), cos(radius / r) - sin(lat1) * sin(lat2))
lat2 = degrees(lat2)
lng2 = degrees(lng2

#Creazione delle isocrone

# Make a radius list, one element for each angle,
#   whose elements will update until the isochrone is found
rad1 = [duration / 12] * number_of_angles  # initial r guess based on 5 mph speed
phi1 = [i * (360 / number_of_angles) for i in range(number_of_angles)]
data0 = [0] * number_of_angles
rad0 = [0] * number_of_angles
rmin = [0] * number_of_angles
rmax = [1.25 * duration] * number_of_angles  # rmax based on 75 mph speed
iso = [[0, 0]] * number_of_angles

# Counter to ensure we're not getting out of hand
j = 0

# Here's where the binary search starts
while sum([a - b for a, b in zip(rad0, rad1)]) != 0:
    rad2 = [0] * number_of_angles
    for i in range(number_of_angles):
        iso[i] = select_destination(origin, phi1[i], rad1[i], access_type, config_path)
        time.sleep(0.1)
    url = build_url(origin, iso, access_type, config_path)
    data = parse_json(url)
    for i in range(number_of_angles):
        if (data[1][i] < (duration - tolerance)) & (data0[i] != data[0][i]):
            rad2[i] = (rmax[i] + rad1[i]) / 2
            rmin[i] = rad1[i]
        elif (data[1][i] > (duration + tolerance)) & (data0[i] != data[0][i]):
            rad2[i] = (rmin[i] + rad1[i]) / 2
            rmax[i] = rad1[i]
        else:
            rad2[i] = rad1[i]
        data0[i] = data[0][i]
    rad0 = rad1
    rad1 = rad2
    j += 1
    if j > 30:
        raise Exception("This is taking too long, so I'm just going to quit.")
